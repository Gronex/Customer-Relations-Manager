using System.Linq;
using Core.DomainModels.Opportunity;
using Core.DomainModels.UserGroups;
using Core.DomainModels.Users;
using Core.DomainServices;
using Core.DomainServices.Repositories;
using Microsoft.AspNet.Identity;

namespace Infrastructure.DataAccess.Repositories
{
    public class OpportunityRepository : IOpportunityRepository
    {
        private readonly ApplicationContext _context;
        private readonly IGenericRepository<Opportunity> _repo;
        private readonly UserManager<User> _userManager;

        public OpportunityRepository(ApplicationContext context, IGenericRepository<Opportunity> repo, UserManager<User> userManager)
        {
            _context = context;
            _repo = repo;
            _userManager = userManager;
        }

        public IQueryable<Opportunity> GetAll()
        {
            return _repo.Get();
        }

        public Opportunity GetById(int id)
        {
            return _repo.GetByKey(id);
        }

        public Opportunity Create(Opportunity model, string userName)
        {
            if (model.Owner == null)
            {
                model.Owner = _context.Users.SingleOrDefault(u => u.UserName == userName);
            }
            else
            {
                model.Owner = _context.Users.SingleOrDefault(u => u.Id == model.Owner.Id);
            }

            if (model.Owner == null)  return null;

            if (model.Company.Id > 0)
            {
                model.Company = _context.Companies.SingleOrDefault(c => c.Id == model.Company.Id);
            }

            model.Category = new OpportunityCategory
            {
                Name = "Autogenerated test",
                Value = 0
            };

            model.Department = new Department
            {
                Name = "Autogenerated test"
            };

            model.Stage = new Stage
            {
                Name = "Autogenerated test",
                Value = 50
            };

            var groups = model.Owner.Groups.Select(g => g.UserGroup);

            foreach (var group in groups)
            {
                model.UserGroups.Add(new UserGroupOpportunity
                {
                    UserGroup = group,
                    Opportunity = model
                });
            }

            return _repo.Insert(model);
        }

        public Opportunity Update(int id, Opportunity model)
        {
            return _repo.Update(o =>
            {
                o.Name = model.Name;
                o.Description = model.Description;
                o.Amount = model.Amount;
                o.Category = model.Category;
                o.Company = model.Company;
                o.Department = o.Department;
                o.EndDate = model.EndDate.Date;
                o.StartDate = model.StartDate.Date;
                o.ExpectedClose = model.ExpectedClose.Date;
                o.Owner = model.Owner;
                o.HourlyPrice = model.HourlyPrice;
                o.Stage = model.Stage;
            }, id);
        }

        public void Delete(int id)
        {
            _repo.DeleteByKey(id);
        }
    }
}
